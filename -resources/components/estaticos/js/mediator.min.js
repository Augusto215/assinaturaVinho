!function(t, s) {
    "use strict";
    "function" == typeof define && define.amd ? define("mediator-js", [], function() {
        return t.Mediator = s(),
        t.Mediator
    }) : "undefined" != typeof exports ? exports.Mediator = s() : t.Mediator = s()
}(this, function() {
    "use strict";
    function t() {
        var t = function() {
            return (65536 * (1 + Math.random()) | 0).toString(16).substring(1)
        };
        return t() + t() + "-" + t() + "-" + t() + "-" + t() + "-" + t() + t() + t()
    }
    function s(i, r, e) {
        if (!(this instanceof s))
            return new s(i,r,e);
        this.id = t(),
        this.fn = i,
        this.options = r,
        this.context = e,
        this.channel = null
    }
    function i(t, s) {
        if (!(this instanceof i))
            return new i(t);
        this.namespace = t || "",
        this._subscribers = [],
        this._channels = {},
        this._parent = s,
        this.stopped = !1
    }
    function r() {
        if (!(this instanceof r))
            return new r;
        this._channels = new i("")
    }
    return s.prototype.update = function(t) {
        t && (this.fn = t.fn || this.fn,
        this.context = t.context || this.context,
        this.options = t.options || this.options,
        this.channel && this.options && void 0 !== this.options.priority && this.channel.setPriority(this.id, this.options.priority))
    }
    ,
    i.prototype.addSubscriber = function(t, i, r) {
        var e = new s(t,i,r);
        return i && void 0 !== i.priority ? (i.priority = i.priority >> 0,
        i.priority < 0 && (i.priority = 0),
        i.priority >= this._subscribers.length && (i.priority = this._subscribers.length - 1),
        this._subscribers.splice(i.priority, 0, e)) : this._subscribers.push(e),
        e.channel = this,
        e
    }
    ,
    i.prototype.stopPropagation = function() {
        this.stopped = !0
    }
    ,
    i.prototype.getSubscriber = function(t) {
        var s = 0
          , i = this._subscribers.length;
        for (i; s < i; s++)
            if (this._subscribers[s].id === t || this._subscribers[s].fn === t)
                return this._subscribers[s]
    }
    ,
    i.prototype.setPriority = function(t, s) {
        var i, r, e, n, o = 0, p = 0;
        for (p = 0,
        n = this._subscribers.length; p < n && (this._subscribers[p].id !== t && this._subscribers[p].fn !== t); p++)
            o++;
        i = this._subscribers[o],
        r = this._subscribers.slice(0, o),
        e = this._subscribers.slice(o + 1),
        this._subscribers = r.concat(e),
        this._subscribers.splice(s, 0, i)
    }
    ,
    i.prototype.addChannel = function(t) {
        this._channels[t] = new i((this.namespace ? this.namespace + ":" : "") + t,this)
    }
    ,
    i.prototype.hasChannel = function(t) {
        return this._channels.hasOwnProperty(t)
    }
    ,
    i.prototype.returnChannel = function(t) {
        return this._channels[t]
    }
    ,
    i.prototype.removeSubscriber = function(t) {
        var s = this._subscribers.length - 1;
        if (t)
            for (s; s >= 0; s--)
                this._subscribers[s].fn !== t && this._subscribers[s].id !== t || (this._subscribers[s].channel = null,
                this._subscribers.splice(s, 1));
        else
            this._subscribers = []
    }
    ,
    i.prototype.publish = function(t) {
        var s, i, r, e = 0, n = this._subscribers.length, o = !1;
        for (n; e < n; e++)
            o = !1,
            s = this._subscribers[e],
            this.stopped || (i = this._subscribers.length,
            void 0 !== s.options && "function" == typeof s.options.predicate ? s.options.predicate.apply(s.context, t) && (o = !0) : o = !0),
            o && (s.options && void 0 !== s.options.calls && --s.options.calls < 1 && this.removeSubscriber(s.id),
            s.fn.apply(s.context, t),
            n = r = this._subscribers.length,
            r === i - 1 && e--);
        this._parent && this._parent.publish(t),
        this.stopped = !1
    }
    ,
    r.prototype.getChannel = function(t, s) {
        var i = this._channels
          , r = t.split(":")
          , e = 0
          , n = r.length;
        if ("" === t)
            return i;
        if (r.length > 0)
            for (n; e < n; e++) {
                if (!i.hasChannel(r[e])) {
                    if (s)
                        break;
                    i.addChannel(r[e])
                }
                i = i.returnChannel(r[e])
            }
        return i
    }
    ,
    r.prototype.subscribe = function(t, s, i, r) {
        var e = this.getChannel(t || "", !1);
        return i = i || {},
        r = r || {},
        e.addSubscriber(s, i, r)
    }
    ,
    r.prototype.once = function(t, s, i, r) {
        return i = i || {},
        i.calls = 1,
        this.subscribe(t, s, i, r)
    }
    ,
    r.prototype.getSubscriber = function(t, s) {
        var i = this.getChannel(s || "", !0);
        return i.namespace !== s ? null : i.getSubscriber(t)
    }
    ,
    r.prototype.remove = function(t, s) {
        var i = this.getChannel(t || "", !0);
        if (i.namespace !== t)
            return !1;
        i.removeSubscriber(s)
    }
    ,
    r.prototype.publish = function(t) {
        var s = this.getChannel(t || "", !0);
        if (s.namespace !== t)
            return null;
        var i = Array.prototype.slice.call(arguments, 1);
        i.push(s),
        s.publish(i)
    }
    ,
    r.prototype.on = r.prototype.subscribe,
    r.prototype.bind = r.prototype.subscribe,
    r.prototype.emit = r.prototype.publish,
    r.prototype.trigger = r.prototype.publish,
    r.prototype.off = r.prototype.remove,
    r.Channel = i,
    r.Subscriber = s,
    r.version = "0.9.8",
    r
});
